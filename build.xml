<project name="Job Service" default="war" basedir=".">

  <description>
      Build war-file for the Job Service
  </description>

  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="dist" location="dist"/>
  <property name="classes" location="classes"/>
  <property name="jar.file" value="KBaseJobService.jar"/>
  <property name="war.file" value="KBaseJobService.war"/>
  <property name="war" value="war"/>
  <property name="war.lib" value="${war}/lib"/>
  <property name="cmd.file" value="job_service_run_task.sh"/>

  <!-- Following property is necessary for compile target -->
  <property name="jarsdir" value=""/>

  <condition property="jartargetdir" value="${jarslibdir}/kbase">
    <and>
      <isset property="jarslibdir"/>
      <not>
        <equals arg1="${jarslibdir}" arg2=""/>
      </not>
    </and>
  </condition>
  <!-- Properties in ant are immutable, so the following assignment will only take place if jartargetdir was not set above. -->
  <property name="jartargetdir" value="${dist}"/>

  <!-- Following property is necessary for script target -->
  <property name="servicedir" value=""/>

  <property environment="env"/>
  <condition property="commonjar" value="kbase/common/kbase-common-0.0.10.jar">
    <or>
      <equals arg1="${env.JENKINS_JAVA_COMMON_JARFILE}" arg2=""/>
      <not>
        <isset property="env.JENKINS_JAVA_COMMON_JARFILE"/>
      </not>
    </or>
  </condition>
  <!-- Properties in ant are immutable, so the following assignment will only take place if jardir was not set above. -->
  <property name="commonjar" value="${env.JENKINS_JAVA_COMMON_JARFILE}"/>
  
  <fileset dir="${jarsdir}" id="serverlib">
    <include name="ini4j/ini4j-0.5.2.jar"/>
    <include name="jetty/jetty-all-7.0.0.jar"/>
    <include name="jna/jna-3.4.0.jar"/>
    <include name="servlet/servlet-api-2.5.jar"/>
    <include name="syslog4j/syslog4j-0.9.46.jar"/>
    <include name="junit/junit-4.9.jar"/>
    <include name="kbase/auth/kbase-auth-0.3.0.jar"/>
    <include name="jackson/jackson-annotations-2.2.3.jar"/>
    <include name="jackson/jackson-core-2.2.3.jar"/>
    <include name="jackson/jackson-databind-2.2.3.jar"/>
    <include name="${commonjar}"/>
    <include name="kbase/shock/shock-client-0.0.8.jar"/>
  </fileset>

  <path id="compile.classpath">
    <fileset refid="serverlib"/>
  </path>

  <path id="test.classpath">
    <path refid="compile.classpath"/>
    <pathelement path="${classes}"/>
  </path>

  <target name="init" description="make directories">
    <!-- Create the output directory structure-->
    <delete dir="${classes}"/>
    <mkdir dir="${classes}"/>
    <mkdir dir="${dist}"/>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <!-- Compile class files-->
    <fail message="Property &quot;jarsdir&quot; needs to be set">
       <condition>
         <equals arg1="${jarsdir}" arg2=""/>
       </condition>
    </fail>
    <javac destdir="${classes}" includeantruntime="false" target="1.7" source="1.7" debug="true" classpathref="compile.classpath">
      <src path="${src}"/>
    </javac>
    <!-- Copy resource files-->
    <copy todir="${classes}">
      <fileset dir="${src}">
        <patternset>
          <include name="**/*"/>
        </patternset>
      </fileset>
    </copy>
    <!-- Make main jar file (includes dependencies, might want to make a stripped down version)-->
    <jar destfile="${dist}/${jar.file}" basedir="${classes}"/>
  </target>

  <target name="war" depends="compile" description="build the WAR file">
    <!-- make the war file for the server-->
    <mkdir dir="${war.lib}"/>
    <copy todir="${war.lib}/" flatten="true">
      <fileset refid="serverlib"/>
    </copy>
    <war destfile="${dist}/${war.file}" webxml="${war}/web.xml">
      <classes dir="${classes}"/>
      <lib dir="${war.lib}"/>
    </war>
    <delete dir="${war.lib}"/>
    <delete dir="${classes}"/>
  </target>

  <target name="copyjar" if="jarslibdir">
    <copy todir="${jartargetdir}/" flatten="true">
      <fileset file="${dist}/${jar.file}"/>
    </copy>
  </target>

  <target name="script" depends="compile,copyjar" description="build script file">
    <fail message="Property &quot;servicedir&quot; needs to be set">
       <condition>
         <equals arg1="${servicedir}" arg2=""/>
       </condition>
    </fail>
    <delete dir="${classes}"/>
    <property name="jar.absolute.path" location="${jartargetdir}/${jar.file}"/>
    <pathconvert targetos="unix" property="lib.classpath" refid="compile.classpath"/>
    <echo file="${dist}/${cmd.file}">#!/bin/sh
if [ -z "$KB_DEPLOYMENT_CONFIG" ]
then
    export KB_DEPLOYMENT_CONFIG=${servicedir}/deploy.cfg
fi
export JAVA_HOME=${env.JAVA_HOME}
export PATH=${env.JAVA_HOME}/bin:$PATH
java -cp ${jar.absolute.path}:${lib.classpath} us.kbase.kbasejobservice.KBaseJobServiceScript $KB_DEPLOYMENT_CONFIG $1 $KB_AUTH_TOKEN
    </echo>
    <chmod file="${dist}/${cmd.file}" perm="a+x"/>
  </target>
	
  <target name="preparejunitreportdir" if="env.JENKINS_REPORT_DIR">
    <delete dir="${env.JENKINS_REPORT_DIR}"/>
    <mkdir dir="${env.JENKINS_REPORT_DIR}"/>
  </target>

  <target name="test" depends="compile, preparejunitreportdir" description="Testing">
    <junit fork="yes" maxmemory="3G" haltonfailure="yes">
      <classpath refid="test.classpath"/>
      <formatter type="plain" usefile="false" />
      <formatter type="xml" usefile="true" if="env.JENKINS_REPORT_DIR"/>
      <batchtest todir="${env.JENKINS_REPORT_DIR}">
        <fileset dir="${src}">
          <include name="**/test/**/**Test.java"/>
        </fileset>
      </batchtest>
    </junit>
    <fail message="Test failure detected, check test results." if="test.failed" />
  </target>

  <target name="clean" description="clean up" >
    <!-- Clean up internal temporary files and folders-->
    <delete dir="${classes}"/>
    <delete dir="${dist}"/>
    <!--<delete dir="${test}"/>-->
  </target>
</project>

